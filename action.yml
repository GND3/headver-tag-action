name: 'HeadVer Tag Action'
description: 'Generate semantic version using HeadVer format and create git tag'
inputs:
  api-name:
    description: 'Optional API name prefix for tag (e.g., "olym-api" results in "olym-api-v0.2532.1")'
    required: false
    default: ''
outputs:
  version:
    description: 'Generated version in HeadVer format'
    value: ${{ steps.headver.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Generate HeadVer build version from git tag
      id: headver
      shell: bash
      run: |
        git fetch --tags
        HEAD=0
        YEARWEEK=$(date +%y)$(date +%V)
        
        # API name이 제공되면 태그 prefix에 포함
        if [[ -n "${{ inputs.api-name }}" ]]; then
          TAG_PREFIX="${{ inputs.api-name }}-v"
          echo "[DEBUG] API Name: ${{ inputs.api-name }}"
        else
          TAG_PREFIX="v"
        fi
        
        echo "[DEBUG] 태그 검색 패턴: ${TAG_PREFIX}$HEAD.$YEARWEEK.*"
        echo "[DEBUG] 현재까지의 태그 목록:"
        git tag --list "${TAG_PREFIX}$HEAD.$YEARWEEK.*" | sort -V
        
        # 가장 큰 빌드 넘버를 찾음
        LAST_BUILD=$(git tag --list "${TAG_PREFIX}$HEAD.$YEARWEEK.*" | awk -F. '{print $3}' | sort -nr | head -n1)
        echo "[DEBUG] LAST_BUILD: $LAST_BUILD"
        if [[ -z "$LAST_BUILD" ]]; then
          BUILD=1
        else
          BUILD=$((LAST_BUILD + 1))
        fi
        VERSION="$HEAD.$YEARWEEK.$BUILD"
        echo "[DEBUG] 최종 생성될 버전: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION"
    
    - name: Create and push custom tag
      uses: mathieudutour/github-tag-action@v6.1
      with:
        custom_tag: ${{ inputs.api-name != '' && format('{0}-v{1}', inputs.api-name, steps.headver.outputs.version) || format('v{0}', steps.headver.outputs.version) }}
        github_token: ${{ env.GITHUB_TOKEN }}