name: 'HeadVer Tag Action'
description: 'Generate semantic version using HeadVer format and create git tag'
inputs:
  identifier:
    description: 'Optional custom identifier prefix for tag (e.g., "olym-api" results in "olym-api-0.2532.1")'
    required: false
    default: ''
outputs:
  version:
    description: 'Generated version in HeadVer format'
    value: ${{ steps.headver.outputs.version }}
  tag:
    description: 'Generated full tag name'
    value: ${{ steps.headver.outputs.tag }}
  release_notes:
    description: 'Release notes generated from commit messages between previous and current tag'
    value: ${{ steps.headver.outputs.release_notes }}
runs:
  using: "composite"
  steps:
    - name: Generate HeadVer build version from git tag
      id: headver
      shell: bash
      run: |
        git fetch --tags
        HEAD=0
        YEARWEEK=$(date +%y)$(date +%V)
        
        # Custom identifier가 제공되면 태그 prefix에 포함
        if [[ -n "${{ inputs.identifier }}" ]]; then
          TAG_PREFIX="${{ inputs.identifier }}-"
          echo "[DEBUG] Custom Identifier: ${{ inputs.identifier }}"
        else
          TAG_PREFIX="v"
        fi
        
        echo "[DEBUG] 태그 검색 패턴: ${TAG_PREFIX}$HEAD.$YEARWEEK.*"
        echo "[DEBUG] 현재까지의 태그 목록:"
        git tag --list "${TAG_PREFIX}$HEAD.$YEARWEEK.*" | sort -V
        
        # 가장 큰 빌드 넘버를 찾음
        LAST_BUILD=$(git tag --list "${TAG_PREFIX}$HEAD.$YEARWEEK.*" | awk -F. '{print $3}' | sort -nr | head -n1)
        echo "[DEBUG] LAST_BUILD: $LAST_BUILD"
        if [[ -z "$LAST_BUILD" ]]; then
          BUILD=1
        else
          BUILD=$((LAST_BUILD + 1))
        fi
        VERSION="$HEAD.$YEARWEEK.$BUILD"
        FINAL_TAG="${TAG_PREFIX}${VERSION}"
        echo "[DEBUG] 최종 생성될 버전: $VERSION"
        echo "[DEBUG] 최종 생성될 태그: $FINAL_TAG"
        # 이전 태그 찾기 (같은 주의 이전 빌드 또는 이전 주의 마지막 빌드)
        PREVIOUS_TAG=""
        if [[ -n "$LAST_BUILD" ]]; then
          # 같은 주에 이전 빌드가 있으면 그것을 사용
          PREVIOUS_BUILD=$((LAST_BUILD - 1))
          if [[ $PREVIOUS_BUILD -gt 0 ]]; then
            PREVIOUS_TAG="${TAG_PREFIX}$HEAD.$YEARWEEK.$PREVIOUS_BUILD"
          fi
        fi
        
        # 같은 주에 이전 빌드가 없으면 이전 주의 마지막 빌드를 찾기
        if [[ -z "$PREVIOUS_TAG" ]]; then
          PREV_WEEK=$((10#$YEARWEEK - 1))
          PREV_YEARWEEK=$(printf "%02d%02d" $(date -d "$(date +%Y)-W$(printf "%02d" $PREV_WEEK)-1" +%y) $PREV_WEEK)
          PREV_LAST_BUILD=$(git tag --list "${TAG_PREFIX}$HEAD.$PREV_YEARWEEK.*" | awk -F. '{print $3}' | sort -nr | head -n1)
          if [[ -n "$PREV_LAST_BUILD" ]]; then
            PREVIOUS_TAG="${TAG_PREFIX}$HEAD.$PREV_YEARWEEK.$PREV_LAST_BUILD"
          fi
        fi
        
        echo "[DEBUG] 이전 태그: $PREVIOUS_TAG"
        
        # 릴리즈 노트 생성
        RELEASE_NOTES=""
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "[DEBUG] 커밋 메시지 수집 중: $PREVIOUS_TAG..HEAD"
          COMMITS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD --no-merges)
          if [[ -n "$COMMITS" ]]; then
            RELEASE_NOTES="## 변경사항"$'\n\n'"$COMMITS"
          else
            RELEASE_NOTES="## 변경사항"$'\n\n'"- 변경사항 없음"
          fi
        else
          echo "[DEBUG] 첫 번째 태그입니다. 모든 커밋 메시지를 수집합니다."
          COMMITS=$(git log --pretty=format:"- %s" --no-merges)
          if [[ -n "$COMMITS" ]]; then
            RELEASE_NOTES="## 변경사항"$'\n\n'"$COMMITS"
          else
            RELEASE_NOTES="## 변경사항"$'\n\n'"- 변경사항 없음"
          fi
        fi
        
        echo "[DEBUG] 생성된 릴리즈 노트:"
        echo "$RELEASE_NOTES"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_ENV
        echo "tag=$FINAL_TAG" >> $GITHUB_OUTPUT
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "version=$VERSION"
    
    - name: Create and push custom tag
      uses: mathieudutour/github-tag-action@v6.1
      with:
        custom_tag: ${{ steps.headver.outputs.tag }}
        tag_prefix: ""
        github_token: ${{ env.GITHUB_TOKEN }}